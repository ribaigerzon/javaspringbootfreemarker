Estoy desarrollando una aplicación web con Java, Spring Boot y MySQL, con JDK17 y IntelliJ como IDE. Hasta el momento he elaborado las entidades: 
package com.ribai.PuntoDeVenta.logic;

import jakarta.persistence.*;
import lombok.*;

import java.io.Serializable;
import java.util.Set;

@NoArgsConstructor
@AllArgsConstructor
@Getter @Setter @ToString @EqualsAndHashCode
@Entity
@Table(name="usuarios")
public class Usuario implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JoinColumn(name="id_usuario")
    private Integer id_usuario;
    @Column(name="nombre")
    private String nombre;
    @Column(name="contrasenia")
    private String contrasenia;
    @Column(name="rol")
    private String rol;

    @OneToMany(mappedBy = "usuario", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<OrdenVenta> ordenesVenta;

    @OneToMany(mappedBy = "usuario", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Producto> productos;
}


package com.ribai.PuntoDeVenta.logic;

import jakarta.persistence.*;
import lombok.*;

import java.io.Serializable;
import java.util.Set;

@NoArgsConstructor
@AllArgsConstructor
@Getter @Setter @ToString @EqualsAndHashCode
@Entity
@Table(name="productos")
public class Producto implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JoinColumn(name="id_producto")
    private Integer id_producto;
    @Column(name = "codigo")
    private String codigo;
    @Column(name="nombre")
    private String nombre;
    @Column(name="descripcion")
    private String descripcion;
    @Column(name="precio")
    private Double precio;

    @ManyToOne
    @JoinColumn(name="id_usuario", nullable=false)
    private Usuario usuario;

    @OneToMany(mappedBy = "producto", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<OrdenVenta> ordenesVenta;

}


package com.ribai.PuntoDeVenta.logic;


import jakarta.persistence.*;
import lombok.*;

import java.io.Serializable;
import java.sql.Date;

@NoArgsConstructor
@AllArgsConstructor
@Getter @Setter @ToString @EqualsAndHashCode
@Entity
@Table(name="ordenesVenta")
public class OrdenVenta implements Serializable {

    @Id
    @JoinColumn(name="id_orden")
    private Integer id_orden;
    @Column(name="fechaVenta")
    private Date fechaVenta;
    @Column(name="importe")
    private Double importe;

    @ManyToOne
    @JoinColumn(name="id_usuario", nullable=false)
    private Usuario usuario;

    @ManyToOne
    @JoinColumn(name="id_producto", nullable=false)
    private Producto producto;
}

Los Controllers:

package com.ribai.PuntoDeVenta.controller;

import com.ribai.PuntoDeVenta.logic.Usuario;
import com.ribai.PuntoDeVenta.service.UsuarioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;

import java.util.List;

@Controller
public class UsuarioController {

    @Autowired
    private UsuarioService usuarioService;

    @GetMapping("/altaUsuario")
    public String showAltaUsuarioPage() {
        return "alta_usuario";  // Devuelve el nombre de la plantilla alta_usuario.ftl
    }

    @PostMapping("/altaUsuario")
    public String handleAltaUsuario(
            @RequestParam("nombre") String nombre,
            @RequestParam("contrasenia") String contrasenia,
            @RequestParam("rol") String rol,
            Model model) {
        try {
            Usuario nuevoUsuario = new Usuario();
            nuevoUsuario.setNombre(nombre);
            nuevoUsuario.setContrasenia(contrasenia);
            nuevoUsuario.setRol(rol);
            usuarioService.saveUsuario(nuevoUsuario);
            return "redirect:/ver_usuario";  // Redirige a una página de listado de usuarios
        } catch (Exception e) {
            model.addAttribute("error", "Error al dar de alta el usuario: " + e.getMessage());
            return "alta_usuario";  // Devuelve la plantilla alta_usuario.ftl con un mensaje de error
        }
    }

    @GetMapping("/usuarios")
    public String showUsuarios(Model model) {
        List<Usuario> usuarios = usuarioService.getAllUsuarios();
        model.addAttribute("usuarios", usuarios);
        return "redirect: /ver_usuario";  // Devuelve el nombre de la plantilla ver_usuario.ftl
    }

}



package com.ribai.PuntoDeVenta.controller;

import com.ribai.PuntoDeVenta.logic.Producto;
import com.ribai.PuntoDeVenta.service.ProductoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/productos")
public class ProductoController {

    @Autowired
    private ProductoService productoService;

    @PostMapping
    public Producto createProducto(@RequestBody Producto producto) {
        return productoService.saveProducto(producto);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Producto> getProductoById(@PathVariable Integer id) {
        return productoService.getProductoById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public List<Producto> getAllProductos() {
        return productoService.getAllProductos();
    }

    @DeleteMapping("/{id}")
    public void deleteProducto(@PathVariable Integer id) {
        productoService.deleteProducto(id);
    }
}


package com.ribai.PuntoDeVenta.controller;

import com.ribai.PuntoDeVenta.logic.OrdenVenta;
import com.ribai.PuntoDeVenta.service.OrdenVentaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/ordenesventa")
public class OrdenVentaController {

    @Autowired
    private OrdenVentaService ordenVentaService;

    @PostMapping
    public OrdenVenta createOrdenVenta(@RequestBody OrdenVenta ordenVenta) {
        return ordenVentaService.saveOrdenVenta(ordenVenta);
    }

    @GetMapping("/{id}")
    public ResponseEntity<OrdenVenta> getOrdenVentaById(@PathVariable Integer id) {
        return ordenVentaService.getOrdenVentaById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public List<OrdenVenta> getAllOrdenesVenta() {
        return ordenVentaService.getAllOrdenesVenta();
    }

    @DeleteMapping("/{id}")
    public void deleteOrdenVenta(@PathVariable Integer id) {
        ordenVentaService.deleteOrdenVenta(id);
    }
}


Los repositorios:

package com.ribai.PuntoDeVenta.repository;

import com.ribai.PuntoDeVenta.logic.Usuario;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UsuarioRepository extends JpaRepository<Usuario, Integer> {
    Optional<Usuario> findByNombreAndContrasenia(String nombre, String contrasenia);
}


package com.ribai.PuntoDeVenta.repository;

import com.ribai.PuntoDeVenta.logic.Producto;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductoRepository extends JpaRepository<Producto, Integer> {
}

package com.ribai.PuntoDeVenta.repository;

import com.ribai.PuntoDeVenta.logic.OrdenVenta;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrdenVentaRepository extends JpaRepository<OrdenVenta, Integer> {
}

Los Services:

package com.ribai.PuntoDeVenta.service;

import com.ribai.PuntoDeVenta.logic.Usuario;
import com.ribai.PuntoDeVenta.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UsuarioService {

    @Autowired
    private UsuarioRepository usuarioRepository;

    public Usuario saveUsuario(Usuario usuario) {
        return usuarioRepository.save(usuario);
    }

    public Optional<Usuario> getUsuarioById(Integer id) {
        return usuarioRepository.findById(id);
    }

    public List<Usuario> getAllUsuarios() {
        return usuarioRepository.findAll();
    }

    public void deleteUsuario(Integer id) {
        usuarioRepository.deleteById(id);
    }

    public Optional<Usuario> authenticate(String nombre, String contrasenia) {
        return usuarioRepository.findByNombreAndContrasenia(nombre, contrasenia);
    }

}


package com.ribai.PuntoDeVenta.service;

import com.ribai.PuntoDeVenta.logic.Producto;
import com.ribai.PuntoDeVenta.repository.ProductoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ProductoService {

    @Autowired
    private ProductoRepository productoRepository;

    public Producto saveProducto(Producto producto) {
        return productoRepository.save(producto);
    }

    public Optional<Producto> getProductoById(Integer id) {
        return productoRepository.findById(id);
    }

    public List<Producto> getAllProductos() {
        return productoRepository.findAll();
    }

    public void deleteProducto(Integer id) {
        productoRepository.deleteById(id);
    }
}


{

    @Autowired
    private OrdenVentaRepository ordenVentaRepository;

    public OrdenVenta saveOrdenVenta(OrdenVenta ordenVenta) {
        return ordenVentaRepository.save(ordenVenta);
    }

    public Optional<OrdenVenta> getOrdenVentaById(Integer id) {
        return ordenVentaRepository.findById(id);
    }

    public List<OrdenVenta> getAllOrdenesVenta() {
        return ordenVentaRepository.findAll();
    }

    public void deleteOrdenVenta(Integer id) {
        ordenVentaRepository.deleteById(id);
    }
}

Así también la interfaz de usuario del Login y del Home en Freemarker:

Login.ftl
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            width: 300px;
            margin: 0 auto;
            padding: 50px;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Login</h2>
        <form action="/login" method="post">
            <div class="form-group">
                <label for="nombre">Nombre de Usuario:</label>
                <input type="text" id="nombre" name="nombre" required>
            </div>
            <div class="form-group">
                <label for="contrasenia">Contraseña:</label>
                <input type="password" id="contrasenia" name="contrasenia" required>
            </div>
            <div class="form-group">
                <button type="submit">Login</button>
            </div>
            <#if error??>
                <div class="error">${error}</div>
            </#if>
        </form>
    </div>
</body>
</html>



Home.ftl
<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
        }
        .sidebar {
            width: 250px;
            background-color: #f8f9fa;
            padding: 10px;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
            height: 100vh;
        }
        .sidebar h2 {
            font-size: 18px;
            margin-bottom: 10px;
        }
        .sidebar ul {
            list-style: none;
            padding: 0;
        }
        .sidebar ul li {
            margin-bottom: 10px;
        }
        .sidebar ul li a {
            text-decoration: none;
            color: #000;
            display: block;
            padding: 5px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .sidebar ul li a:hover {
            background-color: #e9ecef;
        }
        .sidebar ul li ul {
            list-style: none;
            padding: 0;
            padding-left: 20px;
            display: none;
        }
        .sidebar ul li ul li a {
            padding: 5px 5px;
        }
        .main {
            flex-grow: 1;
            padding: 20px;
        }
        .header {
            background-color: #343a40;
            color: #fff;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header .username {
            cursor: pointer;
            position: relative;
        }
        .header .username ul {
            display: none;
            position: absolute;
            right: 0;
            background-color: #fff;
            color: #000;
            list-style: none;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .header .username:hover ul {
            display: block;
        }
    </style>
    <script>
        function toggleSubmenu(id) {
            var submenu = document.getElementById(id);
            if (submenu.style.display === 'block') {
                submenu.style.display = 'none';
            } else {
                submenu.style.display = 'block';
            }
        }
    </script>
</head>
<body>
    <div class="sidebar">
        <h2>Menú</h2>
        <ul>
            <li><a href="javascript:void(0)" onclick="toggleSubmenu('usuariosSubmenu')">Usuarios</a>
                <ul id="usuariosSubmenu">
                    <li><a href="/alta_usuario">Alta de Usuarios</a></li>
                    <li><a href="/ver_usuario">Ver Usuarios</a></li>
                </ul>
            </li>
            <li><a href="javascript:void(0)" onclick="toggleSubmenu('productosSubmenu')">Productos</a>
                <ul id="productosSubmenu">
                    <li><a href="/productos/alta">Alta Productos</a></li>
                    <li><a href="/productos">Inventario</a></li>
                </ul>
            </li>
            <li><a href="javascript:void(0)" onclick="toggleSubmenu('ordenesVentaSubmenu')">Órdenes de Venta</a>
                <ul id="ordenesVentaSubmenu">
                    <li><a href="/ordenesventa/generar">Generar Orden de Venta</a></li>
                    <li><a href="/ordenesventa">Ver Órdenes de Venta</a></li>
                </ul>
            </li>
            <li><a href="javascript:void(0)" onclick="toggleSubmenu('reportesSubmenu')">Reportes</a>
                <ul id="reportesSubmenu">
                    <li><a href="/reportes/ordenes">Órdenes de Venta</a></li>
                    <li><a href="/reportes/inventario">Inventario</a></li>
                </ul>
            </li>
        </ul>
    </div>
    <div class="main">
        <div class="header">
            <div>Bienvenido, ${usuario}!</div>
            <div class="username">Usuario
                <ul>
                    <li><a href="/logout">Cerrar Sesión</a></li>
                </ul>
            </div>
        </div>
        <div class="content">
            <h1>Punto de Venta</h1>
            <h2>Selecciona una opción del menú</h2>
        </div>
    </div>
</body>
</html>

Y sus controllers:
{

    @Autowired
    private UsuarioService usuarioService;

    private static final Logger logger = LoggerFactory.getLogger(LoginController.class);

    @GetMapping("/login")
    public String login() {
        return "login";
    }

    @PostMapping("/login")
    public String login(@RequestParam("nombre") String nombre, @RequestParam("contrasenia") String contrasenia, Model model, HttpSession session) {
        if (usuarioService.authenticate(nombre, contrasenia).isPresent()) {
            session.setAttribute("usuario", nombre);
            return "redirect:/home";
        } else {
            model.addAttribute("error", "Credenciales inválidas");
            return "login";
        }
    }

    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/login";
    }

}


package com.ribai.PuntoDeVenta.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import javax.servlet.http.HttpSession;

@Controller
public class HomeController {

    private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

    @GetMapping("/home")
    public String home(HttpSession session, Model model) {
        String usuario = (String) session.getAttribute("usuario");
        if (usuario == null) {
            return "redirect:/login";
        }
        model.addAttribute("usuario", usuario);
        return "home";
    }
}

Así como un control de errores:

Error.ftl
<!DOCTYPE html>
<html>
<head>
    <title>Error</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            width: 300px;
            margin: 0 auto;
            padding: 50px;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .message {
            color: red;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Error</h2>
        <div class="message">
            <#if message??>
                ${message}
            <#else>
                Ha ocurrido un error inesperado.
            </#if>
        </div>
    </div>
</body>
</html>


package com.ribai.PuntoDeVenta.exception;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(Exception.class)
    public ModelAndView handleException(Exception ex, Model model) {
        ModelAndView mav = new ModelAndView();
        mav.addObject("error", ex.getMessage());
        mav.setViewName("error");
        return mav;
    }
}

El POM es el siguiente:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ribai</groupId>
	<artifactId>PuntoDeVenta</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>PuntoDeVenta</name>
	<description>Ejercicio con Java, SpringBoot, MySql y JPA</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<!-- Spring Data JPA -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- Spring Boot Starter Web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Test Dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- MySQL Driver -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- Spring Boot Starter FreeMarker -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
		</dependency>
		<!--<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
			<version>RELEASE</version>
			<scope>compile</scope>
		</dependency>-->
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

El application.properties:
spring.application.name=PuntoDeVenta

spring.datasource.url=jdbc:mysql://localhost:3306/puntodeventa
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# FreeMarker settings
spring.freemarker.enabled=true
spring.freemarker.template-loader-path=classpath:/templates/
spring.freemarker.suffix=.ftl
spring.freemarker.charset=UTF-8
spring.freemarker.cache=false
spring.freemarker.prefer-file-system-access=false
spring.freemarker.expose-request-attributes=true
spring.freemarker.expose-session-attributes=true
spring.freemarker.expose-spring-macro-helpers=true

Y el webConfig:
package com.ribai.PuntoDeVenta.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;
import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Bean
    public FreeMarkerConfigurer freemarkerConfigurer() {
        FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();
        configurer.setTemplateLoaderPath("classpath:/templates/");
        return configurer;
    }

    @Bean
    public FreeMarkerViewResolver freemarkerViewResolver() {
        FreeMarkerViewResolver resolver = new FreeMarkerViewResolver();
        resolver.setPrefix(""); // No es necesario establecer un prefijo para FreeMarker
        resolver.setSuffix(".ftl"); // Establece el sufijo para los archivos de FreeMarker
        resolver.setCache(false); // Establece en false si deseas ver los cambios inmediatamente
        return resolver;
    }
}

Al ejecutar la aplicación, la ventaja de ejecución muestra lo siguiente:

2024-08-04T15:52:32.071-06:00  INFO 12044 --- [PuntoDeVenta] [           main] c.r.P.PuntoDeVentaApplication            : Starting PuntoDeVentaApplication using Java 22.0.2 with PID 12044 (C:\Users\Ribai\Documents\NetBeansProjects\PuntoVenta\PuntoDeVenta\target\classes started by Ribai in C:\Users\Ribai\Documents\NetBeansProjects\PuntoVenta\PuntoDeVenta)
2024-08-04T15:52:32.077-06:00  INFO 12044 --- [PuntoDeVenta] [           main] c.r.P.PuntoDeVentaApplication            : No active profile set, falling back to 1 default profile: "default"
2024-08-04T15:52:37.415-06:00  INFO 12044 --- [PuntoDeVenta] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-08-04T15:52:38.361-06:00  INFO 12044 --- [PuntoDeVenta] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 887 ms. Found 3 JPA repository interfaces.
2024-08-04T15:52:43.087-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-08-04T15:52:43.196-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-08-04T15:52:43.197-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-08-04T15:52:43.534-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-08-04T15:52:43.539-06:00  INFO 12044 --- [PuntoDeVenta] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 10677 ms
2024-08-04T15:52:46.082-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-08-04T15:52:46.736-06:00  INFO 12044 --- [PuntoDeVenta] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-08-04T15:52:47.123-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-08-04T15:52:48.964-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-08-04T15:52:49.258-06:00  INFO 12044 --- [PuntoDeVenta] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-08-04T15:52:50.373-06:00  INFO 12044 --- [PuntoDeVenta] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3d0352
2024-08-04T15:52:50.381-06:00  INFO 12044 --- [PuntoDeVenta] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-08-04T15:52:50.672-06:00  WARN 12044 --- [PuntoDeVenta] [           main] org.hibernate.orm.deprecation            : HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2024-08-04T15:52:50.675-06:00  WARN 12044 --- [PuntoDeVenta] [           main] org.hibernate.orm.deprecation            : HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2024-08-04T15:52:55.108-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-08-04T15:52:56.187-06:00  INFO 12044 --- [PuntoDeVenta] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-08-04T15:52:59.813-06:00  WARN 12044 --- [PuntoDeVenta] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-08-04T15:53:02.634-06:00  INFO 12044 --- [PuntoDeVenta] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-08-04T15:53:02.662-06:00  INFO 12044 --- [PuntoDeVenta] [           main] c.r.P.PuntoDeVentaApplication            : Started PuntoDeVentaApplication in 34.767 seconds (process running for 41.946)
2024-08-04T15:53:17.188-06:00  INFO 12044 --- [PuntoDeVenta] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-08-04T15:53:17.189-06:00  INFO 12044 --- [PuntoDeVenta] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-08-04T15:53:17.193-06:00  INFO 12044 --- [PuntoDeVenta] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 3 ms

Sin embargo, al momento de intentar loguearme en la aplicación, al parecer no logra comparar el nombre de usuario y contraseña introducidos por el usuario y compararlos con los datos existentes en la base de datos y muestra el siguiente error:

Error
Ha ocurrido un error inesperado.

También se genera un error al 
Me puedes ayudar a identificar en dónde se encuentra el error?